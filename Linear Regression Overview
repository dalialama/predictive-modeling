
getwd()
#create Training and Testing sets
FluTrain = read.csv("FluTrain.csv")
FluTest = read.csv("FluTest.csv")
summary(FluTrain)
FluTrain = subset(FluTrain, ILI == max(ILI))

FluTrain = read.csv("FluTrain.csv")

#find max value within FluTrain for ILI
which.max(FluTrain$ILI)

#identify week of max value baside on above step
FluTrain$Week[n]

#create histogram
hist(FluTrain$ILI)

#create log plots from Training set of ILI & Queries
plot(log(FluTrain$ILI), log(FluTrain$Queries))

#create linear model predicting ILI using Queries in the Training data set
FluTrend1 = lm(log(ILI)~ Queries, data = FluTrain)
summary(FluTrend1)


PredTest1 = exp(predict(FluTrend1, newdata=FluTest))
which(FluTest$Week == "2012-03-11 - 2012-03-17")
PredTest1[11]

summary(PredTest1)
FluTest$ILI[11]
(2.293422 - 2.187378)/2.293422

#calc SSE, RMSE
SSE = sum((PredTest1 - FluTest$ILI)^2)
RMSE = sqrt(SSE/nrow(FluTest))
RMSE

#install zoo package - for use when working with irregular time series of numeric vectors/matrices and factors
install.packages("zoo")
library(zoo)
ILILag2 = lag(zoo(FluTrain$ILI), -2, na.pad=TRUE)
FluTrain$ILILag2 = coredata(ILILag2)
summary(ILILag2)

plot(log(FluTrain$ILILag2), log(FluTrain$ILI))

FluTrend2 = lm(log(ILI) ~ Queries + log(ILILag2), data=FluTrain)
summary(FluTrend2)

ILILag2 = lag(zoo(FluTest$ILI), -2, na.pad=TRUE)
FluTest$ILILag2 = coredata(ILILag2)
summary(FluTest$ILILag2)

nrow(FluTrain)
FluTest$ILILag2[1] = FluTrain$ILI[416]
FluTest$ILILag2[2] = FluTrain$ILI[417]
FluTest$ILILag2[1]
FluTest$ILILag2[2]

PredTest2 = exp(predict(FluTrend2, newdata=FluTest))
SSE = sum((PredTest2-FluTest$ILI)^2)
RMSE = sqrt(SSE / nrow(FluTest))
sqrt(mean((PredTest2-FluTest$ILI)^2))
